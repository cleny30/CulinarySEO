// <auto-generated />
using System;
using BusinessObject.AppDbContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Pgvector;

#nullable disable

namespace BusinessObject.Migrations
{
    [DbContext(typeof(CulinaryContext))]
    [Migration("20250813082845_SeedInitialData")]
    partial class SeedInitialData
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "vector");
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("BusinessObject.Models.Entity.Blog", b =>
                {
                    b.Property<Guid>("BlogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("blog_id");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("content");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uuid")
                        .HasColumnName("customer_id");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("title");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("BlogId");

                    b.HasIndex("CustomerId")
                        .HasDatabaseName("idx_customer_id_blog");

                    b.ToTable("blogs");
                });

            modelBuilder.Entity("BusinessObject.Models.Entity.BlogCategory", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("category_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CategoryId"));

                    b.Property<string>("CategoryImage")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("category_image");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("category_name");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.HasKey("CategoryId");

                    b.HasIndex("CategoryName")
                        .HasDatabaseName("idx_category_bloc_name");

                    b.ToTable("blog_categories");
                });

            modelBuilder.Entity("BusinessObject.Models.Entity.BlogCategoryMapping", b =>
                {
                    b.Property<Guid>("BlogId")
                        .HasColumnType("uuid")
                        .HasColumnName("blog_id");

                    b.Property<int>("CategoryId")
                        .HasColumnType("integer")
                        .HasColumnName("category_id");

                    b.HasKey("BlogId", "CategoryId");

                    b.HasIndex("BlogId")
                        .HasDatabaseName("idx_blog_id_category");

                    b.HasIndex("CategoryId")
                        .HasDatabaseName("idx_category_id_blog");

                    b.ToTable("blog_category_mappings");
                });

            modelBuilder.Entity("BusinessObject.Models.Entity.BlogComment", b =>
                {
                    b.Property<Guid>("CommentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("comment_id");

                    b.Property<Guid>("BlogId")
                        .HasColumnType("uuid")
                        .HasColumnName("blog_id");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("content");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uuid")
                        .HasColumnName("customer_id");

                    b.Property<Guid?>("ParentCommentId")
                        .HasColumnType("uuid")
                        .HasColumnName("parent_comment_id");

                    b.HasKey("CommentId");

                    b.HasIndex("BlogId")
                        .HasDatabaseName("idx_blog_id_comment");

                    b.HasIndex("CustomerId")
                        .HasDatabaseName("idx_customer_id_comment");

                    b.HasIndex("ParentCommentId")
                        .HasDatabaseName("idx_parent_comment_id");

                    b.ToTable("blog_comments");
                });

            modelBuilder.Entity("BusinessObject.Models.Entity.BlogImage", b =>
                {
                    b.Property<Guid>("ImageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("image_id");

                    b.Property<Guid>("BlogId")
                        .HasColumnType("uuid")
                        .HasColumnName("blog_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("image_url");

                    b.Property<bool>("IsPrimary")
                        .HasColumnType("boolean")
                        .HasColumnName("is_primary");

                    b.HasKey("ImageId");

                    b.HasIndex("BlogId")
                        .HasDatabaseName("idx_blog_id");

                    b.ToTable("blog_images");
                });

            modelBuilder.Entity("BusinessObject.Models.Entity.BlogSave", b =>
                {
                    b.Property<Guid>("SaveId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("save_id");

                    b.Property<Guid>("BlogId")
                        .HasColumnType("uuid")
                        .HasColumnName("blog_id");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uuid")
                        .HasColumnName("customer_id");

                    b.Property<DateTime>("SavedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("saved_at");

                    b.HasKey("SaveId");

                    b.HasIndex("BlogId")
                        .HasDatabaseName("idx_blog_id_save");

                    b.HasIndex("CustomerId")
                        .HasDatabaseName("idx_customer_id_save");

                    b.ToTable("blog_saves");
                });

            modelBuilder.Entity("BusinessObject.Models.Entity.Cart", b =>
                {
                    b.Property<Guid>("CartId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("cart_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uuid")
                        .HasColumnName("customer_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("CartId");

                    b.HasIndex("CustomerId")
                        .HasDatabaseName("idx_customer_id_cart");

                    b.ToTable("carts");
                });

            modelBuilder.Entity("BusinessObject.Models.Entity.CartItem", b =>
                {
                    b.Property<Guid>("CartItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("cart_item_id");

                    b.Property<DateTime>("AddedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("added_at");

                    b.Property<Guid>("CartId")
                        .HasColumnType("uuid")
                        .HasColumnName("cart_id");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid")
                        .HasColumnName("product_id");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer")
                        .HasColumnName("quantity");

                    b.HasKey("CartItemId");

                    b.HasIndex("CartId")
                        .HasDatabaseName("idx_cart_id");

                    b.HasIndex("ProductId")
                        .HasDatabaseName("idx_product_id_cart_item");

                    b.ToTable("cart_items");
                });

            modelBuilder.Entity("BusinessObject.Models.Entity.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("category_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CategoryId"));

                    b.Property<string>("CategoryImage")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("category_image");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("category_name");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.HasKey("CategoryId");

                    b.HasIndex("CategoryName")
                        .HasDatabaseName("idx_category_name");

                    b.ToTable("categories");
                });

            modelBuilder.Entity("BusinessObject.Models.Entity.ChatHistory", b =>
                {
                    b.Property<Guid>("ChatId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("chat_id");

                    b.Property<Guid>("ChatSessionId")
                        .HasColumnType("uuid");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("message");

                    b.HasKey("ChatId");

                    b.HasIndex("ChatSessionId");

                    b.ToTable("chat_histories");
                });

            modelBuilder.Entity("BusinessObject.Models.Entity.ChatSession", b =>
                {
                    b.Property<Guid>("ChatSessionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("chat_session_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uuid")
                        .HasColumnName("customer_id");

                    b.Property<Guid>("ManagerId")
                        .HasColumnType("uuid")
                        .HasColumnName("manager_id");

                    b.Property<int>("SupportType")
                        .HasColumnType("integer")
                        .HasColumnName("support_type");

                    b.HasKey("ChatSessionId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("ManagerId");

                    b.ToTable("chat_sessions");
                });

            modelBuilder.Entity("BusinessObject.Models.Entity.Customer", b =>
                {
                    b.Property<Guid>("CustomerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("customer_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("email");

                    b.Property<DateTime?>("ExpiresAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("expires_at");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("full_name");

                    b.Property<string>("Password")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("password");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("phone");

                    b.Property<string>("ProfilePic")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("profile_pic");

                    b.Property<bool?>("Revoked")
                        .HasColumnType("boolean")
                        .HasColumnName("revoked");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("status");

                    b.Property<string>("Token")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("token");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("username");

                    b.HasKey("CustomerId");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasDatabaseName("idx_email_customer");

                    b.HasIndex("FullName")
                        .HasDatabaseName("idx_full_name");

                    b.HasIndex("Status")
                        .HasDatabaseName("idx_customer_status");

                    b.ToTable("customers");
                });

            modelBuilder.Entity("BusinessObject.Models.Entity.CustomerAddress", b =>
                {
                    b.Property<Guid>("AddressId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("address_id");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("address");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uuid")
                        .HasColumnName("customer_id");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("boolean")
                        .HasColumnName("is_default");

                    b.HasKey("AddressId");

                    b.HasIndex("CustomerId")
                        .HasDatabaseName("idx_customer_id_address");

                    b.HasIndex("IsDefault")
                        .HasDatabaseName("idx_is_default");

                    b.ToTable("customer_addresses");
                });

            modelBuilder.Entity("BusinessObject.Models.Entity.DeliverySlot", b =>
                {
                    b.Property<Guid>("SlotId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("slot_id");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("end_time");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uuid")
                        .HasColumnName("order_id");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("start_time");

                    b.HasKey("SlotId");

                    b.HasIndex("OrderId");

                    b.ToTable("delivery_slots");
                });

            modelBuilder.Entity("BusinessObject.Models.Entity.Manager", b =>
                {
                    b.Property<Guid>("ManagerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("manager_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("email");

                    b.Property<DateTime?>("ExpiresAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("expires_at");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("full_name");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("password");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("phone");

                    b.Property<bool?>("Revoked")
                        .HasColumnType("boolean")
                        .HasColumnName("revoked");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer")
                        .HasColumnName("role_id");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("status");

                    b.Property<string>("Token")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("token");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("username");

                    b.HasKey("ManagerId");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasDatabaseName("idx_email");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("idx_role_id");

                    b.HasIndex("Username")
                        .IsUnique()
                        .HasDatabaseName("idx_username");

                    b.ToTable("managers");
                });

            modelBuilder.Entity("BusinessObject.Models.Entity.NotificationCustomer", b =>
                {
                    b.Property<int>("NotificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("notification_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("NotificationId"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uuid")
                        .HasColumnName("customer_id");

                    b.Property<bool>("IsRead")
                        .HasColumnType("boolean")
                        .HasColumnName("is_read");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(125)
                        .HasColumnType("character varying(125)")
                        .HasColumnName("message");

                    b.HasKey("NotificationId");

                    b.HasIndex("CustomerId");

                    b.ToTable("NotificationCustomers");
                });

            modelBuilder.Entity("BusinessObject.Models.Entity.NotificationManager", b =>
                {
                    b.Property<int>("NotificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("notification_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("NotificationId"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<bool>("IsRead")
                        .HasColumnType("boolean")
                        .HasColumnName("is_read");

                    b.Property<Guid>("ManagerId")
                        .HasColumnType("uuid")
                        .HasColumnName("manager_id");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(125)
                        .HasColumnType("character varying(125)")
                        .HasColumnName("message");

                    b.HasKey("NotificationId");

                    b.HasIndex("ManagerId");

                    b.ToTable("NotificationManagers");
                });

            modelBuilder.Entity("BusinessObject.Models.Entity.Order", b =>
                {
                    b.Property<Guid>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("order_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uuid")
                        .HasColumnName("customer_id");

                    b.Property<string>("OrderStatus")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("order_status");

                    b.Property<Guid?>("ShipperId")
                        .HasColumnType("uuid")
                        .HasColumnName("shipper_id");

                    b.Property<string>("ShippingAddress")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("shipping_address");

                    b.Property<decimal>("ShippingFee")
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("shipping_fee");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("total_price");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("OrderId");

                    b.HasIndex("CustomerId")
                        .HasDatabaseName("idx_customer_id_order");

                    b.HasIndex("OrderStatus")
                        .HasDatabaseName("idx_order_status");

                    b.HasIndex("ShipperId")
                        .HasDatabaseName("idx_shipper_id");

                    b.ToTable("orders");
                });

            modelBuilder.Entity("BusinessObject.Models.Entity.OrderDetail", b =>
                {
                    b.Property<Guid>("OrderDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("order_detail_id");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uuid")
                        .HasColumnName("order_id");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid")
                        .HasColumnName("product_id");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer")
                        .HasColumnName("quantity");

                    b.Property<decimal>("Subtotal")
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("subtotal");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("unit_price");

                    b.HasKey("OrderDetailId");

                    b.HasIndex("OrderId")
                        .HasDatabaseName("idx_order_id");

                    b.HasIndex("ProductId")
                        .HasDatabaseName("idx_product_id_order_detail");

                    b.ToTable("order_details");
                });

            modelBuilder.Entity("BusinessObject.Models.Entity.OrderStatusHistory", b =>
                {
                    b.Property<Guid>("HistoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("history_id");

                    b.Property<string>("ChangeNote")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("change_note");

                    b.Property<DateTime?>("ChangedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("changed_at");

                    b.Property<Guid?>("ChangedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("changed_by");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uuid")
                        .HasColumnName("order_id");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("status");

                    b.HasKey("HistoryId");

                    b.HasIndex("ChangedBy")
                        .HasDatabaseName("idx_changed_by_history");

                    b.HasIndex("OrderId")
                        .HasDatabaseName("idx_order_id_history");

                    b.HasIndex("Status")
                        .HasDatabaseName("idx_status");

                    b.ToTable("order_status_history");
                });

            modelBuilder.Entity("BusinessObject.Models.Entity.OrderVoucher", b =>
                {
                    b.Property<Guid>("OrderVoucherId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("order_voucher_id");

                    b.Property<DateTime>("AppliedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("applied_at");

                    b.Property<decimal>("AppliedDiscount")
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("applied_discount");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uuid")
                        .HasColumnName("order_id");

                    b.Property<Guid>("VoucherId")
                        .HasColumnType("uuid")
                        .HasColumnName("voucher_id");

                    b.HasKey("OrderVoucherId");

                    b.HasIndex("OrderId")
                        .HasDatabaseName("idx_order_id_voucher");

                    b.HasIndex("VoucherId")
                        .HasDatabaseName("idx_voucher_id_order");

                    b.ToTable("order_vouchers");
                });

            modelBuilder.Entity("BusinessObject.Models.Entity.Permission", b =>
                {
                    b.Property<int>("PermissionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("permission_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("PermissionId"));

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("PermissionName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("permission_name");

                    b.HasKey("PermissionId");

                    b.HasIndex("PermissionName")
                        .IsUnique()
                        .HasDatabaseName("idx_permission_name");

                    b.ToTable("permissions");
                });

            modelBuilder.Entity("BusinessObject.Models.Entity.Product", b =>
                {
                    b.Property<Guid>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("product_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<decimal?>("Discount")
                        .HasColumnType("decimal(5,2)")
                        .HasColumnName("discount");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("price");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("product_name");

                    b.Property<int?>("TotalSold")
                        .HasColumnType("integer")
                        .HasColumnName("total_sold");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("ProductId");

                    b.HasIndex("ProductName")
                        .HasDatabaseName("idx_product_name");

                    b.ToTable("products");
                });

            modelBuilder.Entity("BusinessObject.Models.Entity.ProductCategoryMapping", b =>
                {
                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid")
                        .HasColumnName("product_id");

                    b.Property<int>("CategoryId")
                        .HasColumnType("integer")
                        .HasColumnName("category_id");

                    b.HasKey("ProductId", "CategoryId");

                    b.HasIndex("CategoryId");

                    b.ToTable("product_category_mappings");
                });

            modelBuilder.Entity("BusinessObject.Models.Entity.ProductHistory", b =>
                {
                    b.Property<Guid>("HistoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("history_id");

                    b.Property<string>("ChangeReason")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("change_reason");

                    b.Property<DateTime>("ChangedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("changed_at");

                    b.Property<Guid>("ChangedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("changed_by");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<decimal?>("Discount")
                        .HasColumnType("decimal(5,2)")
                        .HasColumnName("discount");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("price");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid")
                        .HasColumnName("product_id");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("product_name");

                    b.HasKey("HistoryId");

                    b.HasIndex("ChangedBy")
                        .HasDatabaseName("idx_changed_by");

                    b.HasIndex("ProductId")
                        .HasDatabaseName("idx_product_id_history");

                    b.ToTable("product_history");
                });

            modelBuilder.Entity("BusinessObject.Models.Entity.ProductImage", b =>
                {
                    b.Property<Guid>("ImageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("image_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("image_url");

                    b.Property<bool>("IsPrimary")
                        .HasColumnType("boolean")
                        .HasColumnName("is_primary");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid")
                        .HasColumnName("product_id");

                    b.HasKey("ImageId");

                    b.HasIndex("ProductId")
                        .HasDatabaseName("idx_product_id");

                    b.ToTable("product_images");
                });

            modelBuilder.Entity("BusinessObject.Models.Entity.ProductImagesEmbedding", b =>
                {
                    b.Property<Guid>("EmbeddingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("embedding_id");

                    b.Property<string>("DescriptionEmbed")
                        .IsRequired()
                        .HasMaxLength(768)
                        .HasColumnType("character varying(768)")
                        .HasColumnName("description_embed");

                    b.Property<Vector>("ImageEmbeddingYolo")
                        .IsRequired()
                        .HasColumnType("vector(3)")
                        .HasColumnName("image_embedding_yolo");

                    b.Property<Guid>("ImageId")
                        .HasColumnType("uuid")
                        .HasColumnName("image_id");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid")
                        .HasColumnName("product_id");

                    b.HasKey("EmbeddingId");

                    b.HasIndex("ImageId");

                    b.HasIndex("ProductId");

                    b.ToTable("product_images_embedding");
                });

            modelBuilder.Entity("BusinessObject.Models.Entity.ProductRecommendation", b =>
                {
                    b.Property<Guid>("PairId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("pair_id");

                    b.Property<Guid>("ProductIdA")
                        .HasColumnType("uuid")
                        .HasColumnName("product_id_a");

                    b.Property<Guid>("ProductIdB")
                        .HasColumnType("uuid")
                        .HasColumnName("product_id_b");

                    b.Property<int>("Score")
                        .HasColumnType("integer")
                        .HasColumnName("score");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("PairId");

                    b.HasIndex("ProductIdB");

                    b.HasIndex("ProductIdA", "ProductIdB")
                        .IsUnique()
                        .HasDatabaseName("UQ_RecommendProductPair");

                    b.ToTable("products_recommendation");
                });

            modelBuilder.Entity("BusinessObject.Models.Entity.ProductReview", b =>
                {
                    b.Property<Guid>("ReviewId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("review_id");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("comment");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uuid")
                        .HasColumnName("customer_id");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid")
                        .HasColumnName("product_id");

                    b.Property<int?>("Rating")
                        .HasColumnType("integer")
                        .HasColumnName("rating");

                    b.HasKey("ReviewId");

                    b.HasIndex("CustomerId")
                        .HasDatabaseName("idx_customer_id_review");

                    b.HasIndex("ProductId")
                        .HasDatabaseName("idx_product_id_review");

                    b.ToTable("product_reviews");
                });

            modelBuilder.Entity("BusinessObject.Models.Entity.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("role_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("RoleId"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("role_name");

                    b.HasKey("RoleId");

                    b.HasIndex("RoleName")
                        .IsUnique()
                        .HasDatabaseName("idx_role_name");

                    b.ToTable("roles");
                });

            modelBuilder.Entity("BusinessObject.Models.Entity.RolePermission", b =>
                {
                    b.Property<int>("RoleId")
                        .HasColumnType("integer")
                        .HasColumnName("role_id");

                    b.Property<int>("PermissionId")
                        .HasColumnType("integer")
                        .HasColumnName("permission_id");

                    b.HasKey("RoleId", "PermissionId");

                    b.HasIndex("PermissionId");

                    b.ToTable("role_permissions");
                });

            modelBuilder.Entity("BusinessObject.Models.Entity.ShipperStatus", b =>
                {
                    b.Property<Guid>("ShipperId")
                        .HasColumnType("uuid")
                        .HasColumnName("shipper_id");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_updated");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("status");

                    b.HasKey("ShipperId");

                    b.HasIndex("Status")
                        .HasDatabaseName("idx_ship_status");

                    b.ToTable("shipper_status");
                });

            modelBuilder.Entity("BusinessObject.Models.Entity.Stock", b =>
                {
                    b.Property<Guid>("StockId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("stock_id");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_updated");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid")
                        .HasColumnName("product_id");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer")
                        .HasColumnName("quantity");

                    b.Property<Guid>("WarehouseId")
                        .HasColumnType("uuid")
                        .HasColumnName("warehouse_id");

                    b.HasKey("StockId");

                    b.HasIndex("ProductId")
                        .HasDatabaseName("idx_product_id_stock");

                    b.HasIndex("WarehouseId")
                        .HasDatabaseName("idx_warehouse_id");

                    b.ToTable("stocks");
                });

            modelBuilder.Entity("BusinessObject.Models.Entity.StockTransaction", b =>
                {
                    b.Property<Guid>("TransactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("transaction_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("expiration_date");

                    b.Property<Guid>("ManagerId")
                        .HasColumnType("uuid")
                        .HasColumnName("manager_id");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid")
                        .HasColumnName("product_id");

                    b.Property<int>("QuantityChange")
                        .HasColumnType("integer")
                        .HasColumnName("quantity_change");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("reason");

                    b.Property<string>("TransactionType")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("transaction_type");

                    b.Property<Guid>("WarehouseId")
                        .HasColumnType("uuid")
                        .HasColumnName("warehouse_id");

                    b.HasKey("TransactionId");

                    b.HasIndex("ManagerId")
                        .HasDatabaseName("idx_manager_id_transaction");

                    b.HasIndex("ProductId")
                        .HasDatabaseName("idx_product_id_transaction");

                    b.HasIndex("WarehouseId")
                        .HasDatabaseName("idx_warehouse_id_transaction");

                    b.ToTable("stock_transactions");
                });

            modelBuilder.Entity("BusinessObject.Models.Entity.Voucher", b =>
                {
                    b.Property<Guid>("VoucherId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("voucher_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("DiscountType")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("discount_type");

                    b.Property<decimal>("DiscountValue")
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("discount_value");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("end_date");

                    b.Property<decimal?>("MaxDiscountValue")
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("max_discount_value");

                    b.Property<int>("MaxVouchersPerOrder")
                        .HasColumnType("integer")
                        .HasColumnName("max_vouchers_per_order");

                    b.Property<decimal>("MinOrderValue")
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("min_order_value");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("start_date");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("status");

                    b.Property<int>("UsageLimit")
                        .HasColumnType("integer")
                        .HasColumnName("usage_limit");

                    b.Property<int?>("UsedCount")
                        .HasColumnType("integer")
                        .HasColumnName("used_count");

                    b.Property<string>("VoucherCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("voucher_code");

                    b.HasKey("VoucherId");

                    b.HasIndex("Status")
                        .HasDatabaseName("idx_status_voucher");

                    b.HasIndex("VoucherCode")
                        .IsUnique()
                        .HasDatabaseName("idx_voucher_code");

                    b.HasIndex("StartDate", "EndDate")
                        .HasDatabaseName("idx_date_range");

                    b.ToTable("vouchers");
                });

            modelBuilder.Entity("BusinessObject.Models.Entity.Warehouse", b =>
                {
                    b.Property<Guid>("WarehouseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("warehouse_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("location");

                    b.Property<string>("WarehouseName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("warehouse_name");

                    b.HasKey("WarehouseId");

                    b.HasIndex("WarehouseName")
                        .HasDatabaseName("idx_warehouse_name");

                    b.ToTable("warehouses");
                });

            modelBuilder.Entity("BusinessObject.Models.Entity.Blog", b =>
                {
                    b.HasOne("BusinessObject.Models.Entity.Customer", "Customer")
                        .WithMany("Blogs")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("BusinessObject.Models.Entity.BlogCategoryMapping", b =>
                {
                    b.HasOne("BusinessObject.Models.Entity.Blog", "Blog")
                        .WithMany("BlogCategoryMappings")
                        .HasForeignKey("BlogId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessObject.Models.Entity.BlogCategory", "BlogCategory")
                        .WithMany("BlogCategoryMappings")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Blog");

                    b.Navigation("BlogCategory");
                });

            modelBuilder.Entity("BusinessObject.Models.Entity.BlogComment", b =>
                {
                    b.HasOne("BusinessObject.Models.Entity.Blog", "Blog")
                        .WithMany("BlogComments")
                        .HasForeignKey("BlogId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessObject.Models.Entity.Customer", "Customer")
                        .WithMany("BlogComments")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.HasOne("BusinessObject.Models.Entity.BlogComment", "ParentComment")
                        .WithMany("ChildComments")
                        .HasForeignKey("ParentCommentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Blog");

                    b.Navigation("Customer");

                    b.Navigation("ParentComment");
                });

            modelBuilder.Entity("BusinessObject.Models.Entity.BlogImage", b =>
                {
                    b.HasOne("BusinessObject.Models.Entity.Blog", "Blog")
                        .WithMany("BlogImages")
                        .HasForeignKey("BlogId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Blog");
                });

            modelBuilder.Entity("BusinessObject.Models.Entity.BlogSave", b =>
                {
                    b.HasOne("BusinessObject.Models.Entity.Blog", "Blog")
                        .WithMany("BlogSaves")
                        .HasForeignKey("BlogId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessObject.Models.Entity.Customer", "Customer")
                        .WithMany("BlogSaves")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Blog");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("BusinessObject.Models.Entity.Cart", b =>
                {
                    b.HasOne("BusinessObject.Models.Entity.Customer", "Customer")
                        .WithMany("Carts")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("BusinessObject.Models.Entity.CartItem", b =>
                {
                    b.HasOne("BusinessObject.Models.Entity.Cart", "Cart")
                        .WithMany("CartItems")
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessObject.Models.Entity.Product", "Product")
                        .WithMany("CartItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cart");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("BusinessObject.Models.Entity.ChatHistory", b =>
                {
                    b.HasOne("BusinessObject.Models.Entity.ChatSession", "ChatSession")
                        .WithMany("ChatHistories")
                        .HasForeignKey("ChatSessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ChatSession");
                });

            modelBuilder.Entity("BusinessObject.Models.Entity.ChatSession", b =>
                {
                    b.HasOne("BusinessObject.Models.Entity.Customer", "Customer")
                        .WithMany("ChatSessions")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessObject.Models.Entity.Manager", "Manager")
                        .WithMany("ChatSessions")
                        .HasForeignKey("ManagerId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Manager");
                });

            modelBuilder.Entity("BusinessObject.Models.Entity.CustomerAddress", b =>
                {
                    b.HasOne("BusinessObject.Models.Entity.Customer", "Customer")
                        .WithMany("CustomerAddresses")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("BusinessObject.Models.Entity.DeliverySlot", b =>
                {
                    b.HasOne("BusinessObject.Models.Entity.Order", "Order")
                        .WithMany("DeliverySlots")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("BusinessObject.Models.Entity.Manager", b =>
                {
                    b.HasOne("BusinessObject.Models.Entity.Role", "Role")
                        .WithMany("Managers")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("BusinessObject.Models.Entity.NotificationCustomer", b =>
                {
                    b.HasOne("BusinessObject.Models.Entity.Customer", "Customer")
                        .WithMany("NotificationCustomers")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("BusinessObject.Models.Entity.NotificationManager", b =>
                {
                    b.HasOne("BusinessObject.Models.Entity.Manager", "Manager")
                        .WithMany("NotificationManagers")
                        .HasForeignKey("ManagerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Manager");
                });

            modelBuilder.Entity("BusinessObject.Models.Entity.Order", b =>
                {
                    b.HasOne("BusinessObject.Models.Entity.Customer", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.HasOne("BusinessObject.Models.Entity.Manager", "Shipper")
                        .WithMany("ShippedOrders")
                        .HasForeignKey("ShipperId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Customer");

                    b.Navigation("Shipper");
                });

            modelBuilder.Entity("BusinessObject.Models.Entity.OrderDetail", b =>
                {
                    b.HasOne("BusinessObject.Models.Entity.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessObject.Models.Entity.Product", "Product")
                        .WithMany("OrderDetails")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("BusinessObject.Models.Entity.OrderStatusHistory", b =>
                {
                    b.HasOne("BusinessObject.Models.Entity.Manager", "ChangedByManager")
                        .WithMany("OrderStatusHistories")
                        .HasForeignKey("ChangedBy")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("BusinessObject.Models.Entity.Order", "Order")
                        .WithMany("OrderStatusHistories")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ChangedByManager");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("BusinessObject.Models.Entity.OrderVoucher", b =>
                {
                    b.HasOne("BusinessObject.Models.Entity.Order", "Order")
                        .WithMany("OrderVouchers")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessObject.Models.Entity.Voucher", "Voucher")
                        .WithMany("OrderVouchers")
                        .HasForeignKey("VoucherId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Voucher");
                });

            modelBuilder.Entity("BusinessObject.Models.Entity.ProductCategoryMapping", b =>
                {
                    b.HasOne("BusinessObject.Models.Entity.Category", "Category")
                        .WithMany("ProductCategoryMappings")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessObject.Models.Entity.Product", "Product")
                        .WithMany("ProductCategoryMappings")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("BusinessObject.Models.Entity.ProductHistory", b =>
                {
                    b.HasOne("BusinessObject.Models.Entity.Manager", "ChangedByManager")
                        .WithMany("ProductHistories")
                        .HasForeignKey("ChangedBy")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.HasOne("BusinessObject.Models.Entity.Product", "Product")
                        .WithMany("ProductHistories")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ChangedByManager");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("BusinessObject.Models.Entity.ProductImage", b =>
                {
                    b.HasOne("BusinessObject.Models.Entity.Product", "Product")
                        .WithMany("ProductImages")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("BusinessObject.Models.Entity.ProductImagesEmbedding", b =>
                {
                    b.HasOne("BusinessObject.Models.Entity.ProductImage", "ProductImage")
                        .WithMany("ProductImagesEmbeddings")
                        .HasForeignKey("ImageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessObject.Models.Entity.Product", "Product")
                        .WithMany("ProductImagesEmbeddings")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("ProductImage");
                });

            modelBuilder.Entity("BusinessObject.Models.Entity.ProductRecommendation", b =>
                {
                    b.HasOne("BusinessObject.Models.Entity.Product", "ProductA")
                        .WithMany("RecommendationsAsA")
                        .HasForeignKey("ProductIdA")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BusinessObject.Models.Entity.Product", "ProductB")
                        .WithMany("RecommendationsAsB")
                        .HasForeignKey("ProductIdB")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ProductA");

                    b.Navigation("ProductB");
                });

            modelBuilder.Entity("BusinessObject.Models.Entity.ProductReview", b =>
                {
                    b.HasOne("BusinessObject.Models.Entity.Customer", "Customer")
                        .WithMany("ProductReviews")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.HasOne("BusinessObject.Models.Entity.Product", "Product")
                        .WithMany("ProductReviews")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("BusinessObject.Models.Entity.RolePermission", b =>
                {
                    b.HasOne("BusinessObject.Models.Entity.Permission", "Permission")
                        .WithMany("RolePermissions")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessObject.Models.Entity.Role", "Role")
                        .WithMany("RolePermissions")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Permission");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("BusinessObject.Models.Entity.ShipperStatus", b =>
                {
                    b.HasOne("BusinessObject.Models.Entity.Manager", "Manager")
                        .WithOne("ShipperStatus")
                        .HasForeignKey("BusinessObject.Models.Entity.ShipperStatus", "ShipperId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Manager");
                });

            modelBuilder.Entity("BusinessObject.Models.Entity.Stock", b =>
                {
                    b.HasOne("BusinessObject.Models.Entity.Product", "Product")
                        .WithMany("Stocks")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessObject.Models.Entity.Warehouse", "Warehouse")
                        .WithMany("Stocks")
                        .HasForeignKey("WarehouseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("BusinessObject.Models.Entity.StockTransaction", b =>
                {
                    b.HasOne("BusinessObject.Models.Entity.Manager", "Manager")
                        .WithMany("StockTransactions")
                        .HasForeignKey("ManagerId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.HasOne("BusinessObject.Models.Entity.Product", "Product")
                        .WithMany("StockTransactions")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessObject.Models.Entity.Warehouse", "Warehouse")
                        .WithMany("StockTransactions")
                        .HasForeignKey("WarehouseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Manager");

                    b.Navigation("Product");

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("BusinessObject.Models.Entity.Blog", b =>
                {
                    b.Navigation("BlogCategoryMappings");

                    b.Navigation("BlogComments");

                    b.Navigation("BlogImages");

                    b.Navigation("BlogSaves");
                });

            modelBuilder.Entity("BusinessObject.Models.Entity.BlogCategory", b =>
                {
                    b.Navigation("BlogCategoryMappings");
                });

            modelBuilder.Entity("BusinessObject.Models.Entity.BlogComment", b =>
                {
                    b.Navigation("ChildComments");
                });

            modelBuilder.Entity("BusinessObject.Models.Entity.Cart", b =>
                {
                    b.Navigation("CartItems");
                });

            modelBuilder.Entity("BusinessObject.Models.Entity.Category", b =>
                {
                    b.Navigation("ProductCategoryMappings");
                });

            modelBuilder.Entity("BusinessObject.Models.Entity.ChatSession", b =>
                {
                    b.Navigation("ChatHistories");
                });

            modelBuilder.Entity("BusinessObject.Models.Entity.Customer", b =>
                {
                    b.Navigation("BlogComments");

                    b.Navigation("BlogSaves");

                    b.Navigation("Blogs");

                    b.Navigation("Carts");

                    b.Navigation("ChatSessions");

                    b.Navigation("CustomerAddresses");

                    b.Navigation("NotificationCustomers");

                    b.Navigation("Orders");

                    b.Navigation("ProductReviews");
                });

            modelBuilder.Entity("BusinessObject.Models.Entity.Manager", b =>
                {
                    b.Navigation("ChatSessions");

                    b.Navigation("NotificationManagers");

                    b.Navigation("OrderStatusHistories");

                    b.Navigation("ProductHistories");

                    b.Navigation("ShippedOrders");

                    b.Navigation("ShipperStatus");

                    b.Navigation("StockTransactions");
                });

            modelBuilder.Entity("BusinessObject.Models.Entity.Order", b =>
                {
                    b.Navigation("DeliverySlots");

                    b.Navigation("OrderDetails");

                    b.Navigation("OrderStatusHistories");

                    b.Navigation("OrderVouchers");
                });

            modelBuilder.Entity("BusinessObject.Models.Entity.Permission", b =>
                {
                    b.Navigation("RolePermissions");
                });

            modelBuilder.Entity("BusinessObject.Models.Entity.Product", b =>
                {
                    b.Navigation("CartItems");

                    b.Navigation("OrderDetails");

                    b.Navigation("ProductCategoryMappings");

                    b.Navigation("ProductHistories");

                    b.Navigation("ProductImages");

                    b.Navigation("ProductImagesEmbeddings");

                    b.Navigation("ProductReviews");

                    b.Navigation("RecommendationsAsA");

                    b.Navigation("RecommendationsAsB");

                    b.Navigation("StockTransactions");

                    b.Navigation("Stocks");
                });

            modelBuilder.Entity("BusinessObject.Models.Entity.ProductImage", b =>
                {
                    b.Navigation("ProductImagesEmbeddings");
                });

            modelBuilder.Entity("BusinessObject.Models.Entity.Role", b =>
                {
                    b.Navigation("Managers");

                    b.Navigation("RolePermissions");
                });

            modelBuilder.Entity("BusinessObject.Models.Entity.Voucher", b =>
                {
                    b.Navigation("OrderVouchers");
                });

            modelBuilder.Entity("BusinessObject.Models.Entity.Warehouse", b =>
                {
                    b.Navigation("StockTransactions");

                    b.Navigation("Stocks");
                });
#pragma warning restore 612, 618
        }
    }
}
